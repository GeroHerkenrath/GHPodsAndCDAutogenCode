To see the issue with duplicate symbols during linking, do the following:

1. Set the ExampleEnt entity's "Codegen" setting to "Class definition" in the MyTSData.xcdatamodeld file.

2. Save the model file and clean the project.

3. Run the project. The linker will find duplicate symbols.


To work around the issue, revert the above process:

1. Set the ExampleEnt entity's "Codegen" setting to "Manual/None" in the MyTSData.xcdatamodeld file.

2. Save the model file and clean the project.

3. Run the project. The linker won't complain.


The reason for the issue seems that Xcode keeps separate copies of the autogenerated files in

    'DerivedData/<project-hash>/Build/Intermediates/<projectname>.build/<buildconfig>/<projectname>.build/DerivedSources/CoreDataGenerated/<modelname>/'

(in case you want to recreate them).
Cocoapods tries to link them as well it seems, which results in a duplicate symbols error.

Those template files are removed from the targets (and not recreated after a clean) if the
Codegen setting for the entity is set to "Manual/None", so the linker is fine.

Also note that the Codegen settings seems to be "Class definition" with for newly created entities in a
project (that uses core data, and has a template xcdatamodeld file, at least). The atogeneration
templates are thus in said folder in DerivedData, but unless the developer actually creates them with
Xcode with "Create NSManagedObject Subclass..." the problem doesn't show, as the linker won't see
two versions of the files. However, linking the template files is unnececcary, of course.
